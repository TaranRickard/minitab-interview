{"version":3,"sources":["components/FormClass.js","components/StatModal.js","App.js","reportWebVitals.js","index.js"],"names":["FormClass","props","resetInputs","event","setState","n","mu","sigma","muPrime","Hypothesis","formError","handleCheck","target","checked","handleSubmit","preventDefault","formValid","errorMessages","state","formErrorMessages","errors","Number","isInteger","isNaN","console","log","showModalFunc","className","Form","onSubmit","this","Group","controlId","Label","as","Control","type","value","onChange","e","Text","hidden","Check","label","disabled","Button","block","variant","onClick","React","Component","StatModal","Modal","show","showModal","onHide","hideModalFunc","Header","closeButton","Title","Body","Table","striped","bordered","hover","hypTest","statVars","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.342fcaf5.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass FormClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Hypothesis: false,\r\n            formErrorMessages: [\r\n                'value must be a number',\r\n                'value must be a number',\r\n                'value must be a number',\r\n                'value must be a number'\r\n            ],\r\n            formError: [\r\n                false, false, false, false\r\n            ],\r\n            n: '',\r\n            mu: '',\r\n            sigma: '',\r\n            muPrime: ''\r\n        };\r\n    }\r\n\r\n    resetInputs = (event) => {\r\n        this.setState({\r\n            n: '',\r\n            mu: '',\r\n            sigma: '',\r\n            muPrime: '',\r\n            Hypothesis: false,\r\n            formError: [false, false, false, false]\r\n        })\r\n    }\r\n\r\n    handleCheck = (event) => {\r\n        this.setState({\r\n            Hypothesis: event.target.checked\r\n        });\r\n        if (!event.target.checked) {\r\n            this.setState({\r\n                muPrime: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        var formValid = true;\r\n        var errorMessages = this.state.formErrorMessages;\r\n        var errors = [false, false, false, false];\r\n\r\n        //check for blank inputs\r\n        if (this.state.n === '') {\r\n            errors[0] = true;\r\n            errorMessages[0] = 'Enter a Sample Size';\r\n            formValid = false;\r\n        }\r\n        if (this.state.mu === '') {\r\n            errors[1] = true;\r\n            errorMessages[1] = 'Enter a Sample Mean';\r\n            formValid = false;\r\n        }\r\n        if (this.state.sigma === '') {\r\n            errors[2] = true;\r\n            errorMessages[2] = 'Enter a Standard Deviation';\r\n            formValid = false;\r\n        }\r\n        if (this.state.Hypothesis) {\r\n            if (this.state.muPrime === '') {\r\n                errors[3] = true;\r\n                errorMessages[3] = 'Enter a Hypothesized Mean';\r\n                formValid = false;\r\n            }\r\n        }\r\n\r\n\r\n        var n = Number(this.state.n);\r\n        var mu = Number(this.state.mu);\r\n        var sigma = Number(this.state.sigma);\r\n        var muPrime = Number(this.state.muPrime);\r\n\r\n\r\n        //n must be whole number >= 2\r\n        if (!Number.isInteger(n) && !errors[0]) {\r\n            //n is not an integer\r\n            formValid = false;\r\n            errorMessages[0] = 'Sample size needs to be a whole number';\r\n            errors[0] = true;\r\n        }\r\n        else if ((n < 2) && !errors[0]) {\r\n            //n is not >=2\r\n            formValid = false;\r\n            errorMessages[0] = 'Sample size needs to be greater than or equal to 2';\r\n            errors[0] = true;\r\n        }\r\n\r\n        //mu must be a number\r\n        if (Number.isNaN(mu) && !errors[1]) {\r\n            //mu is not a number\r\n            formValid = false;\r\n            errorMessages[1] = 'Sample mean must be a number';\r\n            errors[1] = true;\r\n        }\r\n\r\n        //sigma must be a number > 0\r\n        if (Number.isNaN(sigma) && !errors[2]) {\r\n            //sigma is not a number\r\n            formValid = false;\r\n            errorMessages[2] = 'Standard Deviation must be a number';\r\n            errors[2] = true;\r\n        }\r\n        else if ((sigma <= 0) && !errors[2]) {\r\n            //sigma is not > 0\r\n            formValid = false;\r\n            errorMessages[2] = 'Standard Deviation must be greater than 0';\r\n            errors[2] = true;\r\n        }\r\n\r\n        //muPrime must be a number\r\n        if (this.state.Hypothesis && !errors[3]) {\r\n            if (Number.isNaN(muPrime)) {\r\n                //muPrime is not a number\r\n                formValid = false;\r\n                errorMessages[3] = 'Hypothesized mean must be a number';\r\n                errors[3] = true;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            formError: errors,\r\n            formErrorMessages: errorMessages\r\n        });\r\n\r\n        if (formValid) {\r\n            console.log('form is valid');\r\n            this.props.showModalFunc({\r\n                n: n,\r\n                mu: mu,\r\n                sigma: sigma,\r\n                muPrime: muPrime\r\n            }, this.state.Hypothesis);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"w-50 mx-auto pt-5 text-left\">\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Group controlId=\"formSampleSize\">\r\n                            <Form.Label as=\"h5\" >Sample size:</Form.Label>\r\n                            <Form.Control type=\"text\" value={this.state.n}\r\n                                onChange={e => this.setState({ n: e.target.value })} />\r\n                            <Form.Text className=\"text-danger\" hidden={!this.state.formError[0]}>\r\n                                {this.state.formErrorMessages[0]}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formSampleMean\">\r\n                            <Form.Label as=\"h5\">Sample mean:</Form.Label>\r\n                            <Form.Control type=\"text\" value={this.state.mu}\r\n                                onChange={e => this.setState({ mu: e.target.value })} />\r\n                            <Form.Text className=\"text-danger\" hidden={!this.state.formError[1]}>\r\n                                {this.state.formErrorMessages[1]}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formStandardDeviation\">\r\n                            <Form.Label as=\"h5\">Standard Deviation:</Form.Label>\r\n                            <Form.Control type=\"text\" value={this.state.sigma}\r\n                                onChange={e => this.setState({ sigma: e.target.value })} />\r\n                            <Form.Text className=\"text-danger\" hidden={!this.state.formError[2]}>\r\n                                {this.state.formErrorMessages[2]}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formHypothesis\">\r\n                            <Form.Check type=\"checkbox\" label=\"Perform hypothesis test\" checked={this.state.Hypothesis}\r\n                                onChange={this.handleCheck} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formHypothesizedMean\">\r\n                            <Form.Label as=\"h5\">Hypothesized mean:</Form.Label>\r\n                            <Form.Control disabled={!this.state.Hypothesis} type=\"text\"\r\n                                value={this.state.muPrime} onChange={e => this.setState({ muPrime: e.target.value })} />\r\n                            <Form.Text className=\"text-danger\" hidden={!this.state.formError[3]}>\r\n                                {this.state.formErrorMessages[3]}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <div className=\"px-2 form-btn\">\r\n                                <Button block variant=\"primary\" type=\"submit\">\r\n                                    OK\r\n          \t\t\t\t</Button>\r\n                            </div>\r\n                            <div className=\"px-2 form-btn\">\r\n                                <Button block variant=\"outline-secondary\" onClick={this.resetInputs}>\r\n                                    Reset\r\n          \t\t\t\t        </Button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </Form>\r\n                </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default FormClass;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass StatModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal show={this.props.showModal} onHide={this.props.hideModalFunc}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Values Entered</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <th>Sample size</th>\r\n                                <th>Sample mean</th>\r\n                                <th>Standard Deviation</th>\r\n                                {this.props.hypTest &&\r\n                                    <th> Hypothesized Mean</th>\r\n                                }\r\n                            </thead>\r\n                            <tbody>\r\n                                <td>{this.props.statVars.n}</td>\r\n                                <td>{this.props.statVars.mu}</td>\r\n                                <td>{this.props.statVars.sigma}</td>\r\n                                {this.props.hypTest &&\r\n                                    <td>{this.props.statVars.muPrime}</td>\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={this.props.hideModalFunc}>\r\n                            Close\r\n\t\t\t\t\t\t</Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StatModal;","///////////////////////////////////////////////////////////////////////////////\n//\n// Project: Minitab Pre-Interview Assignment\n//\n// Author: Taran Rickard\n// - tbr5094@psu.edu | taranrickard@gmail.com\n// - 484-949-5540\n//\n// Created: 1/13/2021\n//\nimport './App.css';\n// import Button from 'react-bootstrap/Button';\n// import Form from 'react-bootstrap/Form';\nimport FormClass from './components/FormClass';\nimport StatModal from './components/StatModal';\nimport React from 'react';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshowModal: false,\n\t\t\tstatVars: {\n\t\t\t\tn: '',\n\t\t\t\tmu: '',\n\t\t\t\tsigma: '',\n\t\t\t\tmuPrime: ''\n\t\t\t}\n\t\t}\n\t}\n\n\thideModalFunc = (e) => {\n\t\tthis.setState({\n\t\t\tshowModal: false\n\t\t})\n\t}\n\tshowModalFunc = (statVars, hypTest) => {\n\t\tthis.setState({\n\t\t\tshowModal: true,\n\t\t\tstatVars: statVars,\n\t\t\thypTest: hypTest\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<FormClass showModalFunc={this.showModalFunc} />\n\t\t\t\t<StatModal showModal={this.state.showModal}\n\t\t\t\t\thideModalFunc={this.hideModalFunc}\n\t\t\t\t\tstatVars={this.state.statVars}\n\t\t\t\t\thypTest={this.state.hypTest} />\n\t\t\t</>\n\t\t)\n\t}\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}